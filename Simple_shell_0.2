#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>
#include <string.h>

#define BUFFER_SIZE 1024
#define TOKEN_DELIMITERS " \t\n"

int main(void) {
    char *buffer;
    size_t bufsize = BUFFER_SIZE;
    ssize_t characters;

    buffer = (char *)malloc(bufsize * sizeof(char));
    if (buffer == NULL) {
        perror("Unable to allocate buffer");
        exit(1);
    }

    while (1) {
        printf("$ ");
        characters = getline(&buffer, &bufsize, stdin);
        if (characters == -1) {
            perror("Error reading input");
            exit(1);
        }

        // Remove trailing newline character
        buffer[strcspn(buffer, "\n")] = '\0';

        // Tokenize input
        char *token;
        char *args[BUFFER_SIZE];
        int arg_count = 0;

        token = strtok(buffer, TOKEN_DELIMITERS);
        while (token != NULL) {
            args[arg_count++] = token;
            token = strtok(NULL, TOKEN_DELIMITERS);
        }
        args[arg_count] = NULL;

        // Fork a child process
        pid_t pid = fork();

        if (pid == -1) {
            perror("Fork failed");
            exit(1);
        } else if (pid == 0) {
            // Child process
            if (execvp(args[0], args) == -1) {
                perror("Command execution failed");
                exit(1);
            }
        } else {
            // Parent process
            wait(NULL);
        }
    }

    free(buffer);
    return 0;
}

